#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5456
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppTracker.WP.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="AppTracker")]
	public partial class AppTrackerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertIdeaPlatform(IdeaPlatform instance);
    partial void UpdateIdeaPlatform(IdeaPlatform instance);
    partial void DeleteIdeaPlatform(IdeaPlatform instance);
    partial void InsertIdea(Idea instance);
    partial void UpdateIdea(Idea instance);
    partial void DeleteIdea(Idea instance);
    partial void InsertIdeaTag(IdeaTag instance);
    partial void UpdateIdeaTag(IdeaTag instance);
    partial void DeleteIdeaTag(IdeaTag instance);
    partial void InsertNote(Note instance);
    partial void UpdateNote(Note instance);
    partial void DeleteNote(Note instance);
    partial void InsertPlatform(Platform instance);
    partial void UpdatePlatform(Platform instance);
    partial void DeletePlatform(Platform instance);
    partial void InsertStatus(Status instance);
    partial void UpdateStatus(Status instance);
    partial void DeleteStatus(Status instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    #endregion
		
		public AppTrackerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AppTrackerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<IdeaPlatform> IdeaPlatforms
		{
			get
			{
				return this.GetTable<IdeaPlatform>();
			}
		}
		
		public System.Data.Linq.Table<Idea> Ideas
		{
			get
			{
				return this.GetTable<Idea>();
			}
		}
		
		public System.Data.Linq.Table<IdeaTag> IdeaTags
		{
			get
			{
				return this.GetTable<IdeaTag>();
			}
		}
		
		public System.Data.Linq.Table<Note> Notes
		{
			get
			{
				return this.GetTable<Note>();
			}
		}
		
		public System.Data.Linq.Table<Platform> Platforms
		{
			get
			{
				return this.GetTable<Platform>();
			}
		}
		
		public System.Data.Linq.Table<Status> Status
		{
			get
			{
				return this.GetTable<Status>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
	}
	
	[Table(Name="Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Idea> _Ideas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Category()
		{
			this._Ideas = new EntitySet<Idea>(new Action<Idea>(this.attach_Ideas), new Action<Idea>(this.detach_Ideas));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="FK_CategoryIdea", Storage="_Ideas", ThisKey="Id", OtherKey="CategoryId", DeleteRule="NO ACTION")]
		public EntitySet<Idea> Ideas
		{
			get
			{
				return this._Ideas;
			}
			set
			{
				this._Ideas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ideas(Idea entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Ideas(Idea entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[Table(Name="IdeaPlatforms")]
	public partial class IdeaPlatform : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdeaId;
		
		private int _PlatformId;
		
		private EntityRef<Idea> _Idea;
		
		private EntityRef<Platform> _Platform;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdeaIdChanging(int value);
    partial void OnIdeaIdChanged();
    partial void OnPlatformIdChanging(int value);
    partial void OnPlatformIdChanged();
    #endregion
		
		public IdeaPlatform()
		{
			this._Idea = default(EntityRef<Idea>);
			this._Platform = default(EntityRef<Platform>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdeaId", DbType="Int NOT NULL")]
		public int IdeaId
		{
			get
			{
				return this._IdeaId;
			}
			set
			{
				if ((this._IdeaId != value))
				{
					if (this._Idea.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdeaIdChanging(value);
					this.SendPropertyChanging();
					this._IdeaId = value;
					this.SendPropertyChanged("IdeaId");
					this.OnIdeaIdChanged();
				}
			}
		}
		
		[Column(Storage="_PlatformId", DbType="Int NOT NULL")]
		public int PlatformId
		{
			get
			{
				return this._PlatformId;
			}
			set
			{
				if ((this._PlatformId != value))
				{
					if (this._Platform.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlatformIdChanging(value);
					this.SendPropertyChanging();
					this._PlatformId = value;
					this.SendPropertyChanged("PlatformId");
					this.OnPlatformIdChanged();
				}
			}
		}
		
		[Association(Name="FK_IdeaIdeaPlatform", Storage="_Idea", ThisKey="IdeaId", OtherKey="Id", IsForeignKey=true)]
		public Idea Idea
		{
			get
			{
				return this._Idea.Entity;
			}
			set
			{
				Idea previousValue = this._Idea.Entity;
				if (((previousValue != value) 
							|| (this._Idea.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Idea.Entity = null;
						previousValue.IdeaPlatforms.Remove(this);
					}
					this._Idea.Entity = value;
					if ((value != null))
					{
						value.IdeaPlatforms.Add(this);
						this._IdeaId = value.Id;
					}
					else
					{
						this._IdeaId = default(int);
					}
					this.SendPropertyChanged("Idea");
				}
			}
		}
		
		[Association(Name="FK_PlatformIdeaPlatform", Storage="_Platform", ThisKey="PlatformId", OtherKey="Id", IsForeignKey=true)]
		public Platform Platform
		{
			get
			{
				return this._Platform.Entity;
			}
			set
			{
				Platform previousValue = this._Platform.Entity;
				if (((previousValue != value) 
							|| (this._Platform.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Platform.Entity = null;
						previousValue.IdeaPlatforms.Remove(this);
					}
					this._Platform.Entity = value;
					if ((value != null))
					{
						value.IdeaPlatforms.Add(this);
						this._PlatformId = value.Id;
					}
					else
					{
						this._PlatformId = default(int);
					}
					this.SendPropertyChanged("Platform");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Ideas")]
	public partial class Idea : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _DateAdded;
		
		private System.DateTime _DateUpdated;
		
		private int _StatusId;
		
		private int _CategoryId;
		
		private EntityRef<Category> _Category;
		
		private EntitySet<IdeaPlatform> _IdeaPlatforms;
		
		private EntitySet<IdeaTag> _IdeaTags;
		
		private EntitySet<Note> _Notes;
		
		private EntityRef<Status> _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnDateUpdatedChanging(System.DateTime value);
    partial void OnDateUpdatedChanged();
    partial void OnStatusIdChanging(int value);
    partial void OnStatusIdChanged();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    #endregion
		
		public Idea()
		{
			this._Category = default(EntityRef<Category>);
			this._IdeaPlatforms = new EntitySet<IdeaPlatform>(new Action<IdeaPlatform>(this.attach_IdeaPlatforms), new Action<IdeaPlatform>(this.detach_IdeaPlatforms));
			this._IdeaTags = new EntitySet<IdeaTag>(new Action<IdeaTag>(this.attach_IdeaTags), new Action<IdeaTag>(this.detach_IdeaTags));
			this._Notes = new EntitySet<Note>(new Action<Note>(this.attach_Notes), new Action<Note>(this.detach_Notes));
			this._Status = default(EntityRef<Status>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(4000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[Column(Storage="_DateUpdated", DbType="DateTime NOT NULL")]
		public System.DateTime DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[Column(Storage="_StatusId", DbType="Int NOT NULL")]
		public int StatusId
		{
			get
			{
				return this._StatusId;
			}
			set
			{
				if ((this._StatusId != value))
				{
					if (this._Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIdChanging(value);
					this.SendPropertyChanging();
					this._StatusId = value;
					this.SendPropertyChanged("StatusId");
					this.OnStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryId", DbType="Int NOT NULL")]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[Association(Name="FK_CategoryIdea", Storage="_Category", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Ideas.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Ideas.Add(this);
						this._CategoryId = value.Id;
					}
					else
					{
						this._CategoryId = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[Association(Name="FK_IdeaIdeaPlatform", Storage="_IdeaPlatforms", ThisKey="Id", OtherKey="IdeaId", DeleteRule="NO ACTION")]
		public EntitySet<IdeaPlatform> IdeaPlatforms
		{
			get
			{
				return this._IdeaPlatforms;
			}
			set
			{
				this._IdeaPlatforms.Assign(value);
			}
		}
		
		[Association(Name="FK_IdeaIdeaTag", Storage="_IdeaTags", ThisKey="Id", OtherKey="IdeaId", DeleteRule="NO ACTION")]
		public EntitySet<IdeaTag> IdeaTags
		{
			get
			{
				return this._IdeaTags;
			}
			set
			{
				this._IdeaTags.Assign(value);
			}
		}
		
		[Association(Name="FK_IdeaNote", Storage="_Notes", ThisKey="Id", OtherKey="Idea_Id", DeleteRule="NO ACTION")]
		public EntitySet<Note> Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				this._Notes.Assign(value);
			}
		}
		
		[Association(Name="FK_StatusIdea", Storage="_Status", ThisKey="StatusId", OtherKey="Id", IsForeignKey=true)]
		public Status Status
		{
			get
			{
				return this._Status.Entity;
			}
			set
			{
				Status previousValue = this._Status.Entity;
				if (((previousValue != value) 
							|| (this._Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status.Entity = null;
						previousValue.Ideas.Remove(this);
					}
					this._Status.Entity = value;
					if ((value != null))
					{
						value.Ideas.Add(this);
						this._StatusId = value.Id;
					}
					else
					{
						this._StatusId = default(int);
					}
					this.SendPropertyChanged("Status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IdeaPlatforms(IdeaPlatform entity)
		{
			this.SendPropertyChanging();
			entity.Idea = this;
		}
		
		private void detach_IdeaPlatforms(IdeaPlatform entity)
		{
			this.SendPropertyChanging();
			entity.Idea = null;
		}
		
		private void attach_IdeaTags(IdeaTag entity)
		{
			this.SendPropertyChanging();
			entity.Idea = this;
		}
		
		private void detach_IdeaTags(IdeaTag entity)
		{
			this.SendPropertyChanging();
			entity.Idea = null;
		}
		
		private void attach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.Idea = this;
		}
		
		private void detach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.Idea = null;
		}
	}
	
	[Table(Name="IdeaTags")]
	public partial class IdeaTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdeaId;
		
		private int _TagId;
		
		private EntityRef<Idea> _Idea;
		
		private EntityRef<Tag> _Tag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdeaIdChanging(int value);
    partial void OnIdeaIdChanged();
    partial void OnTagIdChanging(int value);
    partial void OnTagIdChanged();
    #endregion
		
		public IdeaTag()
		{
			this._Idea = default(EntityRef<Idea>);
			this._Tag = default(EntityRef<Tag>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdeaId", DbType="Int NOT NULL")]
		public int IdeaId
		{
			get
			{
				return this._IdeaId;
			}
			set
			{
				if ((this._IdeaId != value))
				{
					if (this._Idea.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdeaIdChanging(value);
					this.SendPropertyChanging();
					this._IdeaId = value;
					this.SendPropertyChanged("IdeaId");
					this.OnIdeaIdChanged();
				}
			}
		}
		
		[Column(Storage="_TagId", DbType="Int NOT NULL")]
		public int TagId
		{
			get
			{
				return this._TagId;
			}
			set
			{
				if ((this._TagId != value))
				{
					if (this._Tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagIdChanging(value);
					this.SendPropertyChanging();
					this._TagId = value;
					this.SendPropertyChanged("TagId");
					this.OnTagIdChanged();
				}
			}
		}
		
		[Association(Name="FK_IdeaIdeaTag", Storage="_Idea", ThisKey="IdeaId", OtherKey="Id", IsForeignKey=true)]
		public Idea Idea
		{
			get
			{
				return this._Idea.Entity;
			}
			set
			{
				Idea previousValue = this._Idea.Entity;
				if (((previousValue != value) 
							|| (this._Idea.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Idea.Entity = null;
						previousValue.IdeaTags.Remove(this);
					}
					this._Idea.Entity = value;
					if ((value != null))
					{
						value.IdeaTags.Add(this);
						this._IdeaId = value.Id;
					}
					else
					{
						this._IdeaId = default(int);
					}
					this.SendPropertyChanged("Idea");
				}
			}
		}
		
		[Association(Name="FK_TagIdeaTag", Storage="_Tag", ThisKey="TagId", OtherKey="Id", IsForeignKey=true)]
		public Tag Tag
		{
			get
			{
				return this._Tag.Entity;
			}
			set
			{
				Tag previousValue = this._Tag.Entity;
				if (((previousValue != value) 
							|| (this._Tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag.Entity = null;
						previousValue.IdeaTags.Remove(this);
					}
					this._Tag.Entity = value;
					if ((value != null))
					{
						value.IdeaTags.Add(this);
						this._TagId = value.Id;
					}
					else
					{
						this._TagId = default(int);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Notes")]
	public partial class Note : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdeaId;
		
		private System.DateTime _DateUpdated;
		
		private System.DateTime _DateAdded;
		
		private string _NoteText;
		
		private int _Idea_Id;
		
		private EntityRef<Idea> _Idea;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdeaIdChanging(int value);
    partial void OnIdeaIdChanged();
    partial void OnDateUpdatedChanging(System.DateTime value);
    partial void OnDateUpdatedChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnNoteTextChanging(string value);
    partial void OnNoteTextChanged();
    partial void OnIdea_IdChanging(int value);
    partial void OnIdea_IdChanged();
    #endregion
		
		public Note()
		{
			this._Idea = default(EntityRef<Idea>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdeaId", DbType="Int NOT NULL")]
		public int IdeaId
		{
			get
			{
				return this._IdeaId;
			}
			set
			{
				if ((this._IdeaId != value))
				{
					this.OnIdeaIdChanging(value);
					this.SendPropertyChanging();
					this._IdeaId = value;
					this.SendPropertyChanged("IdeaId");
					this.OnIdeaIdChanged();
				}
			}
		}
		
		[Column(Storage="_DateUpdated", DbType="DateTime NOT NULL")]
		public System.DateTime DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[Column(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[Column(Storage="_NoteText", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string NoteText
		{
			get
			{
				return this._NoteText;
			}
			set
			{
				if ((this._NoteText != value))
				{
					this.OnNoteTextChanging(value);
					this.SendPropertyChanging();
					this._NoteText = value;
					this.SendPropertyChanged("NoteText");
					this.OnNoteTextChanged();
				}
			}
		}
		
		[Column(Storage="_Idea_Id", DbType="Int NOT NULL")]
		public int Idea_Id
		{
			get
			{
				return this._Idea_Id;
			}
			set
			{
				if ((this._Idea_Id != value))
				{
					if (this._Idea.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdea_IdChanging(value);
					this.SendPropertyChanging();
					this._Idea_Id = value;
					this.SendPropertyChanged("Idea_Id");
					this.OnIdea_IdChanged();
				}
			}
		}
		
		[Association(Name="FK_IdeaNote", Storage="_Idea", ThisKey="Idea_Id", OtherKey="Id", IsForeignKey=true)]
		public Idea Idea
		{
			get
			{
				return this._Idea.Entity;
			}
			set
			{
				Idea previousValue = this._Idea.Entity;
				if (((previousValue != value) 
							|| (this._Idea.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Idea.Entity = null;
						previousValue.Notes.Remove(this);
					}
					this._Idea.Entity = value;
					if ((value != null))
					{
						value.Notes.Add(this);
						this._Idea_Id = value.Id;
					}
					else
					{
						this._Idea_Id = default(int);
					}
					this.SendPropertyChanged("Idea");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Platforms")]
	public partial class Platform : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<IdeaPlatform> _IdeaPlatforms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Platform()
		{
			this._IdeaPlatforms = new EntitySet<IdeaPlatform>(new Action<IdeaPlatform>(this.attach_IdeaPlatforms), new Action<IdeaPlatform>(this.detach_IdeaPlatforms));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(4000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="FK_PlatformIdeaPlatform", Storage="_IdeaPlatforms", ThisKey="Id", OtherKey="PlatformId", DeleteRule="NO ACTION")]
		public EntitySet<IdeaPlatform> IdeaPlatforms
		{
			get
			{
				return this._IdeaPlatforms;
			}
			set
			{
				this._IdeaPlatforms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IdeaPlatforms(IdeaPlatform entity)
		{
			this.SendPropertyChanging();
			entity.Platform = this;
		}
		
		private void detach_IdeaPlatforms(IdeaPlatform entity)
		{
			this.SendPropertyChanging();
			entity.Platform = null;
		}
	}
	
	[Table()]
	public partial class Status : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Idea> _Ideas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Status()
		{
			this._Ideas = new EntitySet<Idea>(new Action<Idea>(this.attach_Ideas), new Action<Idea>(this.detach_Ideas));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(4000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="FK_StatusIdea", Storage="_Ideas", ThisKey="Id", OtherKey="StatusId", DeleteRule="NO ACTION")]
		public EntitySet<Idea> Ideas
		{
			get
			{
				return this._Ideas;
			}
			set
			{
				this._Ideas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ideas(Idea entity)
		{
			this.SendPropertyChanging();
			entity.Status = this;
		}
		
		private void detach_Ideas(Idea entity)
		{
			this.SendPropertyChanging();
			entity.Status = null;
		}
	}
	
	[Table(Name="Tags")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<IdeaTag> _IdeaTags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Tag()
		{
			this._IdeaTags = new EntitySet<IdeaTag>(new Action<IdeaTag>(this.attach_IdeaTags), new Action<IdeaTag>(this.detach_IdeaTags));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(4000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="FK_TagIdeaTag", Storage="_IdeaTags", ThisKey="Id", OtherKey="TagId", DeleteRule="NO ACTION")]
		public EntitySet<IdeaTag> IdeaTags
		{
			get
			{
				return this._IdeaTags;
			}
			set
			{
				this._IdeaTags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IdeaTags(IdeaTag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
		}
		
		private void detach_IdeaTags(IdeaTag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
		}
	}
}
#pragma warning restore 1591
